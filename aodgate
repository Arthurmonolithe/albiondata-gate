#!/usr/bin/env ruby
require 'logger'
require 'pry'
require 'sinatra'
require 'securerandom'
require 'digest/sha2'
require 'rack/throttle'

STDOUT.sync = true
LOGGER = Logger.new(STDOUT)

require_relative 'config'
require_relative 'lib/nats'

NATSForwarder.start

$POWS = {}
$POWS_SOLVED = []

#Limit the amount of pows to keep
#Delete the oldest handed until threshold is reached
Thread.new do
  Thread.current.priority = -3 
  loop do
    begin
      if ($POWS.count - POW_KEEP) > 0
        $POWS.delete(*$POWS.keys.first($POWS.count - POW_KEEP))
      end

      if ($POWS_SOLVED.count - POW_KEEP) > 0
        $POWS_SOLVED.shift(($POWS_SOLVED.count - POW_KEEP))
      end
    ensure
      sleep 120
    end
  end
end

class AODGate < Sinatra::Base
  configure do
    set :sessions, false
    set :logging, true
    set :show_exceptions, true
    set :run, false
    set bind: "0.0.0.0"
    set port: 4223
    set server: "puma"
  end

  use Rack::Throttle::Daily, :max => REQUEST_LIMIT_PER_DAY
  
  before do
  end

  get '/pow' do
    challange = { wanted: SecureRandom.hex(POW_RANDOMNESS).unpack("B*")[0][0..POW_DIFFICULITY-1], key: SecureRandom.hex(POW_RANDOMNESS) }
    $POWS[challange[:key]] = challange[:wanted]
    return challange.to_json
  end

  post '/pow' do
    wanted = $POWS[params[:key]]
    halt(902, "Pow not handed") unless wanted # This pow was never requested
    halt(903, "Pow not solved correctly") unless Digest::SHA2.hexdigest("aod^" + params[:solution] + "^" + params[:key]).unpack("B*")[0].start_with?(wanted)
    $POWS_SOLVED << params[:key]
    $POWS.delete(params[:key])
    halt(200, "OK")
  end

  post '/:topic/:pow' do
    halt 404 unless TOPICS.include?(params[:topic])
    begin
      data = JSON.parse(request.body.read)
    rescue
      halt(901, "Invalid JSON data")
    end
    halt(904, "Pow not solved") unless $POWS_SOLVED.include?(params["pow"])
    NATSForwarder.forward([params[:topic]], data)
    $POWS_SOLVED.delete(params["pow"])
    halt(200, "OK")
  end
  
end

LOGGER.info("Starting server...")
unless $0 == "pry"
  AODGate.run!
  exit 0
else
  binding.pry
end
